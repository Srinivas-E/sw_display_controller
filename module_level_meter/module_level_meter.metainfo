-------------------------------------------------------------------------------
-- Descriptive metadata
-------------------------------------------------------------------------------

componentName = "Level Meter Display"
componentFullName = ""
alternativeNames = { }
componentDescription = "Offers a level meter kind of display"
componentVersion = "1v0"

-------------------------------------------------------------------------------
-- Parameter descriptions.
-------------------------------------------------------------------------------

configPoints =
{
  

  number_of_colors =
  {
    short   = "Number of colors",
    long    = "Number of colors used for level meter display",
    help    = "This selects the number of colors used.",
    units   = "",
    define  = "LEVEL_METER_NCOLORS",
    type    = "int",
    min		= 1,
    resourceUsageFlags = {"noeffect"},
    default = 1
  },

  colors =
  {
    short   = "Level meter colors",
    long    = "",
    help    = "This lists the colors used for level meter display.",
    units   = "",
    define  = "level_meter_colors",
    type    = "int",
    resourceUsageFlags = {"noeffect"},
    default = 0xFFFF
  },

}

derivedValues = {}

ports = {}

channels = {
	c_dc = {
		short = "Display controller channel",
		long = "Channel to display controller",
		help = "",
	},
}

function getConfigStatus()
  local status = "Trusted Configuration"
  local issues = {}
  return status, issues
end
            
-------------------------------------------------------------------------------
-- Source generation functions
-------------------------------------------------------------------------------


generatedCode = {
  includes = {"level_meter.h","level_meter_conf.h"},

  globals = [[  ]],

  body = [[
	unsigned frBufNo, data[], N, maxData;
	level_meter(${swblock.chanends.c_dc}, frBufNo, data, N, maxData);
  ]]
}

files = {
  ["module_level_meter/level_meter_conf_example.h"] = "src/level_meter_conf.h",
}

api = {
	'level_meter'
      }

